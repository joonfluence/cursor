---
description: 
globs: 
alwaysApply: true
---
# Cursor Coding Rule Guide

## 💡 JPA / QueryDSL / Entity 규칙

- `@ManyToOne`, `@OneToMany`는 사용하지 마세요.
- `@Setter`는 사용하지 마세요. 객체 생성은 `빌더 패턴` 또는 `정적 팩토리 메서드`를 사용하세요.
- 엔티티 클래스에는 인덱스, 유니크 제약 등을 선언하지 않습니다. 필요한 제약은 DDL에서 따로 처리합니다.
- 테이블 조인이 필요할 경우, 반드시 `QueryDSL`을 사용해서 처리하세요.
- 불필요한 `@Column`은 생략합니다. 기본 매핑이면 선언하지 않아도 됩니다.

## 🔠 네이밍 컨벤션

- Entity 클래스는 `~Entity` 접미사를 붙입니다. 예: `UserEntity`
- Repository 클래스는 Entity명을 제외하고 `~Repository`로 작성합니다. 예: `UserRepository`
- CQRS 패턴에 따라 네이밍합니다:
  - 생성/수정/삭제: `~CommandService`, `~CommandController`
  - 조회 관련: `~QueryService`, `~QueryController`

## 🧱 클래스 구성 순서

- 클래스 내 메서드 정렬 순서:
  - 필드 → 생성자 → public 메서드 → private 메서드
- `@RequiredArgsConstructor`를 사용하고, DI는 `private final`로 선언합니다.

## 🧩 필드 선언 순서

1. `static final`
2. `static`
3. `final`
4. 일반 필드

## 🧼 코드 스타일

- 어노테이션과 메서드 선언 사이에는 한 줄 공백을 둡니다.
- import 순서는 다음과 같습니다:
  - Java 표준 라이브러리
  - 외부 라이브러리
  - 내부 모듈

## 테스트코드 관련

- **테스트 코드**
  - 테스트 메서드 이름은 `snake_case` 또는 `Given_When_Then` 패턴
  - 테스트 메서드에는 `@DisplayName` 필수
  - `Given / When / Then` 주석으로 구조 명확히 구분
  - 하나의 테스트 메서드는 하나의 assert만 (또는 `assertAll` 사용)
  - 테스트 메서드 순서: `@Before → @Test → 헬퍼 메서드`
  - 테스트 클래스 명명: `UserService → UserServiceTest`