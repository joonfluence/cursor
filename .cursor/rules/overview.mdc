---
description: 
globs: 
alwaysApply: true
---
# Cursor Coding Rule Guide

## 프로젝트 개요 (Project Overview)

이 프로젝트는 스프링 부트 기반의 게시판(Board) 애플리케이션입니다. 사용자가 게시글을 작성, 조회, 수정, 삭제할 수 있는 기능을 제공합니다. 백엔드는 Spring Boot와 JPA/Hibernate를 사용하여 구현되었으며, 프론트엔드는 템플릿 엔진을 활용하여 구현되었습니다.

## 기술 스택

- 백엔드: Spring Boot, Spring Data JPA, QueryDSL
- 프론트엔드: Thymeleaf 템플릿 엔진
- 데이터베이스: JPA/Hibernate ORM
- 빌드 도구: Gradle

# 관련 코드 (Relevant Codes)

## 엔티티 구조

- `PostEntity`: 게시글 정보를 저장하는 엔티티
- `CommentEntity`: 댓글 정보를 저장하는 엔티티

## 서비스 레이어

- `PostService`: 게시글 생성/수정/삭제/조회 관련 비즈니스 로직
- `CommentService`: 댓글 생성/수정/삭제/조회 관련 비즈니스 로직

## 컨트롤러 레이어

- `PostController`: 게시글 생성/수정/삭제/조회 API 엔드포인트
- `CommentController`: 댓글 생성/수정/삭제/조회 API 엔드포인트

# 현재 파일 구조 (Current File Structure)

```
src/
├── main/
│   ├── java/
│   │   └── com/
│   │       └── board/
│   │           ├── BoardApplication.java
│   │           ├── config/
│   │           ├── controller/
│   │           ├── dto/
│   │           ├── entity/
│   │           ├── repository/
│   │           └── service/
│   └── resources/
│       ├── application.properties
│       ├── static/
│       └── templates/
│           ├── layout/
│           └── posts/
└── test/
    └── java/
        └── com/
            └── board/
```

## 주요 디렉토리 설명

- `src/main/java/com/board/entity`: JPA 엔티티 클래스 저장
- `src/main/java/com/board/repository`: 데이터 접근 레이어 (Repository)
- `src/main/java/com/board/service`: 비즈니스 로직 레이어 (Service)
- `src/main/java/com/board/controller`: 컨트롤러 레이어 (API 엔드포인트)
- `src/main/java/com/board/dto`: 데이터 전송 객체 (DTO)
- `src/main/java/com/board/config`: 애플리케이션 설정 파일
- `src/main/resources/templates`: 프론트엔드 템플릿 파일

## 💡 JPA / QueryDSL / Entity 규칙

- `@ManyToOne`, `@OneToMany`는 사용하지 마세요.
- `@Setter`는 사용하지 마세요. 객체 생성은 `빌더 패턴` 또는 `정적 팩토리 메서드`를 사용하세요.
- 엔티티 클래스에는 인덱스, 유니크 제약 등을 선언하지 않습니다. 필요한 제약은 DDL에서 따로 처리합니다.
- 테이블 조인이 필요할 경우, 반드시 `QueryDSL`을 사용해서 처리하세요.
- 불필요한 `@Column`은 생략합니다. 기본 매핑이면 선언하지 않아도 됩니다.

## 🔠 네이밍 컨벤션

- Entity 클래스는 `~Entity` 접미사를 붙입니다. 예: `UserEntity`
- Repository 클래스는 Entity명을 제외하고 `~Repository`로 작성합니다. 예: `UserRepository`
- CQRS 패턴에 따라 네이밍합니다:
  - 생성/수정/삭제: `~CommandService`, `~CommandController`
  - 조회 관련: `~QueryService`, `~QueryController`

## 🧱 클래스 구성 순서

- 클래스 내 메서드 정렬 순서:
  - 필드 → 생성자 → public 메서드 → private 메서드
- `@RequiredArgsConstructor`를 사용하고, DI는 `private final`로 선언합니다.

## 🧩 필드 선언 순서

1. `static final`
2. `static`
3. `final`
4. 일반 필드

## 🧼 코드 스타일

- 어노테이션과 메서드 선언 사이에는 한 줄 공백을 둡니다.
- import 순서는 다음과 같습니다:
  - Java 표준 라이브러리
  - 외부 라이브러리
  - 내부 모듈

## 테스트코드 관련

- **테스트 코드**
  - 테스트 메서드 이름은 `snake_case` 또는 `Given_When_Then` 패턴
  - 테스트 메서드에는 `@DisplayName` 필수
  - `Given / When / Then` 주석으로 구조 명확히 구분
  - 하나의 테스트 메서드는 하나의 assert만 (또는 `assertAll` 사용)
  - 테스트 메서드 순서: `@Before → @Test → 헬퍼 메서드`
  - 테스트 클래스 명명: `UserService → UserServiceTest`